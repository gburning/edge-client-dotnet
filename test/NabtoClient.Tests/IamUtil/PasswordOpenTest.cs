using Microsoft.Extensions.Logging;
using Xunit;
using Nabto.Edge.Client.Tests;
using Nabto.Edge.Client;

namespace Nabto.Edge.Client.Tests;

public class PasswordOpenTest
{
    [Fact]
    public async Task TestPasswordOpen()
    {
        var client = NabtoClient.Create();

        var connection = client.CreateConnection();
        var device = TestDevices.GetPasswordAuthenticateDevice();
        connection.SetOptions(device.GetConnectOptions());
        connection.SetOptions(new ConnectionOptions { PrivateKey = client.CreatePrivateKey() });
        await connection.ConnectAsync();

        var username = TestUtil.UniqueUsername();
        await IamUtil.PairPasswordOpenAsync(connection, username, device.Password);
    }

    [Fact]
    public async Task TestPasswordOpen_InvalidPassword()
    {
        var client = NabtoClient.Create();

        var connection = client.CreateConnection();
        var device = TestDevices.GetPasswordAuthenticateDevice();
        connection.SetOptions(device.GetConnectOptions());
        connection.SetOptions(new ConnectionOptions { PrivateKey = client.CreatePrivateKey() });
        await connection.ConnectAsync();

        var username = TestUtil.UniqueUsername();
        IamException exception = await Assert.ThrowsAsync<IamException>(async () => { await IamUtil.PairPasswordOpenAsync(connection, username, "invalid"); });
        Assert.Equal(IamError.AUTHENTICATION_ERROR, exception.Error);
    }

    [Fact]
    public async Task TestPasswordOpen_UsernameInUse()
    {
        var client = NabtoClient.Create();

        var connection1 = client.CreateConnection();
        var connection2 = client.CreateConnection();
        var device = TestDevices.GetPasswordAuthenticateDevice();
        connection1.SetOptions(device.GetConnectOptions());
        connection1.SetOptions(new ConnectionOptions { PrivateKey = client.CreatePrivateKey() });
        connection2.SetOptions(device.GetConnectOptions());
        connection2.SetOptions(new ConnectionOptions { PrivateKey = client.CreatePrivateKey() });
        await connection1.ConnectAsync();
        await connection2.ConnectAsync();

        var username = TestUtil.UniqueUsername();
        await IamUtil.PairPasswordOpenAsync(connection1, username, device.Password);

        // reuse username from another client
        IamException exception = await Assert.ThrowsAsync<IamException>(async () => { await IamUtil.PairPasswordOpenAsync(connection2, username, device.Password); });


        Assert.Equal(IamError.USERNAME_EXISTS, exception.Error);
    }
}